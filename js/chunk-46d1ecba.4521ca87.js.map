{"version":3,"sources":["webpack:///./src/viewmodel/core/tools/mapfile/data/MindMapLocalData.js","webpack:///./src/viewmodel/core/tools/mapfile/LoadLocalXJMind.js","webpack:///./src/core/core/dataformat/fileImport/NewLocalMindParameter.js","webpack:///./src/viewmodel/core/tools/mapfile/MapSaveData.js","webpack:///./src/common/netWork/mind_map_api.js","webpack:///./src/viewmodel/core/tools/mapfile/MindContentJsonData.js","webpack:///./src/viewmodel/core/tools/mapfile/MindContentData.js","webpack:///./src/viewmodel/core/tools/mapfile/data/SheetData.js","webpack:///./src/viewmodel/facade/MindmapDataRouter.js","webpack:///./src/viewmodel/core/tools/mapfile/data/MindSheets.js","webpack:///./src/viewmodel/core/tools/mapfile/data/FilePathAndName.js"],"names":["_MindmapDataRouter","_interopRequireDefault","require","obj","__esModule","default","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","t","_toPrimitive","String","r","e","toPrimitive","call","Number","MindMapLocalData","this","mid","id","rootId","sheetId","name","path","localPath","isSyncToCloud","value","arguments","_this","syncToClouded","undefined","MindmapDataRouter","postGetMindmap","res","error","exports","_HttpServerConfig","_base","_NewLocalMindParameter","_Util","_HashMap","_MindMapLocalData","_MindSheets","_SheetData","_MapSaveData","_MindMapZipConstant","_regeneratorRuntime","n","hasOwnProperty","a","c","asyncIterator","u","toStringTag","define","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","apply","err","LoadLocalXJMind","appPath","mindMapLocalData","saveData","MapSaveData","resources","HashMap","parameter","NewLocalMindParameter","localpath","setPath","that","_ref","_callee","contentJSPath","_context","MindMapZipConstant","FileSeparator","MindZIPContentPath","loadJson","data","json","JSON","parse","cell","setRootId","sheetIndex","index","element","JsPath","MindZIPContentFolderName","fileName","contentJs","isValid","content","mindType","styleIndex","mindDisplayType","isEmpty","nodeLayoutType","lineLayout","_x","isElectron","_ref2","_callee2","mindKey","currentKey","keyArr","_context2","getAppPath","MindZIPLocalFilesFolderName","MindZIPContentTemporaryFolderName","existsLocalFile","time","lastchangetime","Util","getCurrentTime","t0","localStorage","t1","indexOf","split","getItem","_x2","_ref3","_callee3","_context3","getLocalPath","desc","getString","strings","Load_File_Error","count","mindSheets","MindSheets","totalNum","pageSize","Math","max","sheetData","SheetData","cover","sheets","_x3","jsonpath","_ref4","_callee4","xhr","_context4","XMLHttpRequest","open","HttpServerConfig","getLocalPathPrefix","responseType","onload","status","fr","FileReader","readAsText","response","addEventListener","result","onerror","send","_x4","url","fs","window","startsWith","md5","removeUrlPrefix","getUrlType","MindZIPFilesFolderName","existsSync","isAddPrefix","local","MindZIPNewPathe","getNameByUrl","format","isCloudStorage","isPrefix","isLoaclMind","getFileName","_ref5","_callee5","srcHttp","blob","_context5","getMediaSrc","getLocalFilePath","asyncLoadLocalFile","fetch","_x5","_ref6","_callee6","buffer","_context6","asyncLoadLocalFileByBuffer","arrayBuffer","_x6","request","oEvent","parentEntityId","stringify","val","mindParameter","keyValue","_MindMe","_FilePathAndName","_MindContentData","_MindContentJsonData","contentList","images","files","version","isSaveAs","MindContentJsonData","list","MindContentData","MindMe","isLogin","getUserId","getMachineId","lastsavetime","fileData","FilePathAndName","mapSaveData","jsonDataCell","postMindmapChecksum","req","onOk","onFail","eventually","headers","onProgress","apiRequest","postMindmapPull","postMindmapListDir","postMindmapListEntities","postMindmapGetEntity","postMindmapGetMindmap","postMindmapGetAi","postMindmapNew","postMindmapGetNumExceed","postMindmapNewByType","postMindmapCopy","postMindmapNewDir","postMindmapDelete","postMindmapQuery","postMindmapMove","postMindmapUploadDir","postMindmapAlias","postMindmapUploadMindmap","postMindmapUploadImage","postMindmapDeleteImage","postMindmapListDeleted","postMindmapSearchDeleted","postMindmapDeletedRestore","postMindmapDeleteCompletely","postMindmapCheckMindmap","postMindmapPlay","postMindmapUploadAttachment","postMindmapDeleteAttachments","postMindmapImportXjmind","postMindmapOcrScan","postMindmapOcrInfo","postMindmapShare","postMindmapModifyShare","postMindmapReshare","postMindmapDeleteShare","postMindmapCollectShare","postMindmapUncollectShare","postMindmapSaveShare","postMindmapAudioLimit","postMindmapUploadAudio","postMindmapDeleteAudio","postMindmapView","postMindmapViewConnectmap","postMindmapNewSheet","postMindmapDeleteSheet","postMindmapMoveSheet","postMindmapModifySheet","postMindmapCopySheet","postMindmapListSheets","postMindmapSearchSheet","postMindmapMigrateSheet","postMindmapExportSheet","postMindmapQueryArchives","postMindmapArchive","postMindmapUnarchive","postMindmapCopyArchive","postMindmapDeleteArchive","postMindmapMoveArchive","postMindmapModifyArchive","postMindmapRearrangeArchive","postMindmapNewArchiveDir","postMindmapSearchArchive","postMindmapListBackups","postMindmapViewBackup","postMindmapRestoreBackup","postMindmapDeleteBackup","postMindmapMyLatex","postMindmapUploadMyLatex","isMd5","_mind_map_api","_LoadLocalXJMind","getPath","loadMainContent","archiveId","audio","audioSeconds","createTime","entityId","isArchived","machineId","modifyTime","parentId","sheetNum","userId","getRootId","getMindmapSheets","setParameter","nodeStr"],"mappings":"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","file":"js/chunk-46d1ecba.4521ca87.js","sourcesContent":["import MindmapDataRouter from \"../../../../facade/MindmapDataRouter\";\nimport MindMe from \"../../../../facade/MindMe\";\n\nclass MindMapLocalData {\n    constructor() {\n        this.mid = \"\"; //设备id\n        this.id = \"\"; //用户id\n        this.rootId = \"\";\n        this.sheetId = \"\";\n        this.name = \"\";\n        this.path = \"\";\n        this.localPath = \"\";\n        this.isSyncToCloud = false;\n    }\n\n    isCloudStorage(id) {\n        if (arguments.length == 0 || id == null || id == this.rootId) {\n            return (this.rootId != null && this.rootId.length > 10) && this.isSyncToCloud;\n        } else {\n            return (id != null && id.length > 10);\n        }\n    }\n\n    setRootId(id, syncToClouded = false) {\n        this.rootId = id\n        if (this.rootId == null || this.rootId.length < 10) {\n            return\n        }\n        \n        if (syncToClouded) {\n            this.isSyncToCloud = true\n        } else {\n            MindmapDataRouter.postGetMindmap(\n                { id: this.rootId},\n                (res) => {\n                    this.isSyncToCloud = true\n                },\n                (error) => {\n                    this.isSyncToCloud = false\n                }\n            );\n        }\n    }\n}\nexport default MindMapLocalData","import HttpServerConfig from \"../../../../common/HttpServerConfig\";\nimport { md5 } from \"../../../../common/netWork/base\";\nimport NewLocalMindParameter from \"../../../../core/core/dataformat/fileImport/NewLocalMindParameter\";\nimport Util from \"../../../../utils/Util\";\nimport HashMap from \"../../base/HashMap\";\nimport MindMapLocalData from \"./data/MindMapLocalData\";\nimport MindSheets from \"./data/MindSheets\";\nimport SheetData from \"./data/SheetData\";\nimport MapSaveData from \"./MapSaveData\";\nimport MindMapZipConstant from \"./MindMapZipConstant\";\n\nclass LoadLocalXJMind {\n\n    constructor(path) {\n        this.appPath = \"\"\n        this.mindMapLocalData = new MindMapLocalData()\n        this.saveData = new MapSaveData()\n        this.resources = new HashMap()\n        this.parameter = new NewLocalMindParameter()\n    }\n\n    reset() {\n        this.mindMapLocalData = new MindMapLocalData()\n        this.saveData = new MapSaveData()\n        this.resources = new HashMap()\n        this.parameter = new NewLocalMindParameter()\n    }\n\n    loadMainContent(path, localpath, rootId, sheetId) {\n        this.setPath(path, localpath)\n        let that = this;\n        return new Promise(async resolve => {\n            if (localpath == null || localpath.length == 0) {\n                resolve(null)\n                return\n            }\n            let contentJSPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentPath\n            that.loadJson(contentJSPath).then((data) => {\n                let json = data;\n                let saveData = JSON.parse(json)\n                that.mindMapLocalData.id = saveData.id\n                that.mindMapLocalData.mid = saveData.mid\n                if (saveData.data != null && saveData.data.length > 0) {\n                    let cell = saveData.data[0]\n                    that.setRootId(cell.id)\n                    let sheetIndex = 0;\n                    if (sheetId != undefined && sheetId != null && sheetId.length > 0) {\n                        for (let index = 0; index < saveData.data.length; index++) {\n                            const element = saveData.data[index];\n                            if (element.id == sheetId) {\n                                cell = element;\n                                sheetIndex = index;\n                                break \n                            }\n                        }\n                    }\n                    \n                    let JsPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentFolderName + MindMapZipConstant.FileSeparator + cell.fileName\n                    that.loadJson(JsPath).then((data) => {\n                        \n                        let contentJs = data;\n                        if (that.parameter.isValid()) {\n                            resolve({content:contentJs, \n                                mindType:cell.mindType, \n                                index:sheetIndex,\n                                styleIndex: that.parameter.styleIndex,\n                                mindDisplayType: that.parameter.mindDisplayType,\n                                isEmpty: that.parameter.isEmpty,\n                                nodeLayoutType:that.parameter.nodeLayoutType,\n                                name: cell.name,\n                                lineLayout:that.parameter.lineLayout})\n                        } else {\n                            resolve({content:contentJs, \n                                mindType:cell.mindType, \n                                index:sheetIndex,\n                                styleIndex: 1,\n                                mindDisplayType: 1,\n                                isEmpty: false,\n                                nodeLayoutType:1,\n                                name: cell.name,\n                                lineLayout:1})\n                        }\n                        \n                    });                    \n                } else {\n                    resolve(null)\n                }\n            });\n        });\n    }\n\n    loadChechMindContent(isElectron, rootId, sheetId) {\n        let that = this;\n        return new Promise(async resolve => {\n            let id = sheetId == null || sheetId.length == 0 ? rootId : sheetId\n            if (id == null || id.length == 0) {               \n                return\n            }\n            if (isElectron) {\n                let fileName = id + \".json\"\n                let path = that.getAppPath() + MindMapZipConstant.MindZIPLocalFilesFolderName + \n                        MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentTemporaryFolderName +\n                        MindMapZipConstant.FileSeparator + fileName\n                if (!that.existsLocalFile(path)) {\n                    resolve(null)\n                    return\n                }       \n                that.loadJson(path).then((data) => {\n                    let json = data;\n                    let saveData = JSON.parse(json)\n                    resolve({content:saveData.content, \n                        mindType:saveData.mindType, \n                        index:0,\n                        styleIndex: 1,\n                        mindDisplayType: 1,\n                        isEmpty: false,\n                        nodeLayoutType:1,\n                        name: saveData.name,\n                        time: saveData.lastchangetime,\n                        lineLayout:1})\n                })\n            } else {\n                let mindKey = \"\"\n                let currentKey = Util.getCurrentTime() + \"|\" + id\n                for(let key in localStorage) {\n                    if (key.length == currentKey.length && key.indexOf(\"|\") > 0) {\n                        let keyArr = key.split(\"|\")\n                        if (keyArr.length != 2) {\n                            continue\n                        }\n                        if (keyArr[1] == id) {\n                            mindKey = key\n                            break\n                        }\n                    }\n                }\n                if (mindKey == null || mindKey.length == 0) {\n                    resolve(null)\n                    return\n                }\n                let json = localStorage.getItem(mindKey);\n                if (json == null || json.length == 0) {\n                    resolve(null)\n                    return\n                }\n                let saveData = JSON.parse(json)\n                resolve({content:saveData.content, \n                    mindType:saveData.mindType, \n                    index:0,\n                    styleIndex: 1,\n                    mindDisplayType: 1,\n                    isEmpty: false,\n                    nodeLayoutType:1,\n                    name: saveData.name,\n                    time: saveData.lastchangetime,\n                    lineLayout:1})\n            }\n        });\n    }\n\n    getMindmapSheets() {\n        let that = this;\n        return new Promise(async resolve => {\n            let localpath = this.getLocalPath()\n            if (localpath == null || localpath.length == 0) {\n                resolve(null, {desc: getString(strings.Load_File_Error)})\n                return\n            }\n            let contentJSPath = localpath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPContentPath\n            that.loadJson(contentJSPath).then((data) => {\n                let json = data;\n                let saveData = JSON.parse(json)\n                if (saveData.data != null && saveData.data.length > 0) {\n                    let count = saveData.data.length;\n                    let mindSheets = new MindSheets()\n                    mindSheets.totalNum =  count\n                    mindSheets.pageSize = Math.max(count, 50);\n                    let rootId = saveData.data[0].id\n                    for (let index = 0; index < count; index++) {\n                        const cell = saveData.data[index];\n                        let sheetData = new SheetData()\n                        sheetData.name = cell.name\n                        sheetData.id = cell.id\n                        sheetData.rootId = rootId\n                        sheetData.cover = \"\";\n                        sheetData.index = index;\n                        sheetData.fileName = cell.fileName;\n                        sheetData.type = cell.mindType;\n                        if (cell.lastchangetime == null || cell.lastchangetime == 0) {\n                            sheetData.lastchangetime = Util.getCurrentTime()\n                        } else {\n                            sheetData.lastchangetime = cell.lastchangetime;\n                        }\n                        \n                        mindSheets.sheets.push(sheetData)\n                    }\n                    resolve(mindSheets)\n                } else {\n                    resolve(null, {desc: getString(strings.Load_File_Error)})\n                }\n            });\n        });\n    }\n\n    loadJson(jsonpath) {\n        let that = this\n        return new Promise(async resolve => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', HttpServerConfig.getLocalPathPrefix(jsonpath, that.appPath), true);\n                xhr.responseType = 'blob';\n                xhr.onload = () => {\n                    if (xhr.status === 200) {\n                        var fr = new FileReader();\n                        fr.readAsText(xhr.response, \"utf-8\");\n                        fr.addEventListener(\"loadend\",(e) => {\n                            var json = e.target.result;\n                            resolve(json)\n                        },false);\n                    } else {\n                        console.log(\"xhr.response xhr.status - \", xhr.status);\n                        resolve(\"\")\n                    }\n                };\n                xhr.onerror = (error) => {\n                    console.log(\"xhr.response error - \", error);\n                    resolve(\"\")\n                };\n                xhr.send();\n            } catch (error) {\n                console.log(\"loadJson error: \", error);\n                resolve(\"\")\n            }\n            \n        });\n    }\n\n    loadLocalImg(url) {\n\n    }\n\n    existsLocalFile(url) {\n        let localPath = this.getLocalPath()\n        // if (localPath == null || localPath.length == 0) {\n        //     return false;\n        // }\n        var fs = window.require('fs');\n        if (url.startsWith(\"http\") && localPath != null && localPath.length > 0) {\n            let name = md5(HttpServerConfig.removeUrlPrefix(url))\n            let type = Util.getUrlType(url)\n            var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\n            if (type != null && type.length > 0) {\n                path = path + \".\" + type;\n            }\n            let e = fs.existsSync(path)\n            return e\n        } else {\n            let e = fs.existsSync(url)\n            return e\n        }\n        return false;\n    }\n    \n    getLocalFilePath(url, isAddPrefix = true) {\n        if (url == null && url.length == 0) {\n            return \"\"\n        }\n        let localPath = this.getLocalPath()\n        if (url.startsWith(\"http\") && localPath != null && localPath.length > 0) {\n            let name = md5(HttpServerConfig.removeUrlPrefix(url))\n            let type = Util.getUrlType(url)\n            var path = localPath + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\n            if (type != null && type.length > 0) {\n                path = path + \".\" + type;\n            }\n            var fs = window.require('fs');\n            let e = fs.existsSync(path)\n            if (e) {\n                if (isAddPrefix) {\n                    return HttpServerConfig.getLocalPathPrefix(path, this.appPath)\n                } else {\n                    return path\n                }\n            }\n        }\n        return url;\n    } \n\n    setRootId(id, syncToClouded = false) {\n        this.mindMapLocalData.setRootId(id, syncToClouded)\n    }\n\n    getRootId() {\n        return this.mindMapLocalData.rootId\n    }\n\n    setSheetId(id) {\n        this.mindMapLocalData.sheetId = id\n    }\n\n    getSheetId() {\n        return this.mindMapLocalData.sheetId\n    }\n\n    setPath(path, local) {\n        if (this.mindMapLocalData.path == path) {\n            return;\n        }\n        this.mindMapLocalData.path = path\n        this.mindMapLocalData.localPath = local\n        if (path == null || path.length == 0 ||\n            path.indexOf(MindMapZipConstant.MindZIPNewPathe) > -1) {\n            this.mindMapLocalData.name = Util.getNameByUrl(local, false)\n        } else {\n            this.mindMapLocalData.name = Util.getNameByUrl(path)\n        }\n    }\n\n    setParameter(value) {\n        if (value == null || value.length == 0) {\n            return;\n        }\n        this.parameter = new NewLocalMindParameter().format(value)\n    }\n\n    getPath() {\n        return this.mindMapLocalData.path;\n    }\n\n    getName() {\n        return this.mindMapLocalData.name;\n    }\n\n    getLocalPath() {\n        return this.mindMapLocalData.localPath;\n    }\n\n    getAppPath() {\n        return this.appPath;\n    }\n\n    isLoaclMind() {\n        return this.mindMapLocalData.path != null && this.mindMapLocalData.path.length > 0\n    }\n\n    isLoaclNotSaved() {\n        return this.mindMapLocalData.path != null && this.mindMapLocalData.path.indexOf(MindMapZipConstant.MindZIPNewPathe) > -1;\n    }\n\n    isCloudStorage(id) {\n        return this.mindMapLocalData.isCloudStorage(id); \n    }\n\n    getFileName(url, isPrefix = false) {\n        let name = md5(HttpServerConfig.removeUrlPrefix(url))\n        if (isPrefix) {\n            let type = Util.getUrlType(url)\n            if (type != null && type.length > 0) {\n                name = name + \".\" + type;\n            }\n        }\n        return name;\n    }\n\n    getUrlLocalPath(url) {\n        if (!this.isLoaclMind()) {\n            return \"\";\n        }\n        let name = this.getFileName(url, true)\n        let type = Util.getUrlType(url)\n        var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName + MindMapZipConstant.FileSeparator + name\n        return path;\n    }\n\n    getLocalFileRootPath() {\n        if (!this.isLoaclMind()) {\n            return \"\";\n        }\n        var path = this.getLocalPath() + MindMapZipConstant.FileSeparator + MindMapZipConstant.MindZIPFilesFolderName\n        return path;\n    }\n\n    loadResourceData(url) {\n        var that = this\n        return new Promise(async resolve => {\n            let srcHttp = HttpServerConfig.getMediaSrc(url)\n            let blob = null;\n            if (that.existsLocalFile(srcHttp)) {\n                let path = that.getLocalFilePath(srcHttp);\n                blob = await that.asyncLoadLocalFile(path)\n            } else {\n                let response = await fetch(srcHttp); \n                blob = await response.blob();                    \n            }\n            if (blob == null) {\n                resolve(null)\n            } else {\n                resolve(blob)\n            }\n        });\n    }\n\n    loadResourceBuffer(url) {\n        var that = this\n        return new Promise(async resolve => {\n            let srcHttp = HttpServerConfig.getMediaSrc(url)\n            let buffer = null;\n            if (that.existsLocalFile(srcHttp)) {\n                let path = that.getLocalFilePath(srcHttp);\n                buffer = await that.asyncLoadLocalFileByBuffer(path)\n            } else {\n                let response = await fetch(srcHttp); \n                buffer = await response.arrayBuffer();                    \n            }\n            if (buffer == null) {\n                resolve(null)\n            } else {\n                resolve(buffer)\n            }\n        });\n    }\n\n\n    asyncLoadLocalFile(path) {\n        return new Promise(resolve => {\n            const request = new XMLHttpRequest();            \n            request.responseType = \"blob\";\n            request.open(\"GET\", path);\n            request.onload = function (oEvent) {\n                if (request.status == 200) {\n                    resolve(request.response)\n                } else {\n                    resolve(null)\n                }\n            }\n            request.send()\n        })\n    }\n\n    asyncLoadLocalFileByBuffer(path) {\n        return new Promise(resolve => {\n            const request = new XMLHttpRequest();            \n            request.responseType = \"arraybuffer\";\n            request.open(\"GET\", path);\n            request.onload = function (oEvent) {\n                if (request.status == 200) {\n                    resolve(request.response)\n                } else {\n                    resolve(null)\n                }\n            }\n            request.send()\n        })\n    }\n}\n\nexport default new LoadLocalXJMind()\n\n\n","\nclass NewLocalMindParameter {\n    constructor() {\n        this.parentEntityId = \"\";\n        this.type = 1\n        this.mindDisplayType = 0\n        this.nodeLayoutType = 1\n        this.lineLayout = 1\n        this.isEmpty = false\n        this.styleIndex = -1\n    }\n\n    getJson() {\n        let json = JSON.stringify(this, function (key, val) {\n            if (typeof val === \"function\") {\n                return val + '';\n            }\n            return val\n        });\n        return json;\n    }\n\n    format(json) {\n        let mindParameter = new NewLocalMindParameter()\n        let data = JSON.parse(json)\n        for (var key in data) {\n            let keyValue = data[key]\n            mindParameter[key] = keyValue\n        }\n        return mindParameter\n    }\n\n    isValid() {\n        return this.styleIndex != -1;\n    }\n}\nexport default NewLocalMindParameter","import { getMachineId } from \"../../../../common/netWork/base\";\nimport Util from \"../../../../utils/Util\";\nimport MindMe from \"../../../facade/MindMe\";\nimport FilePathAndName from \"./data/FilePathAndName\";\nimport MindContentData from \"./MindContentData\";\nimport MindContentJsonData from \"./MindContentJsonData\";\n\nclass MapSaveData {\n    constructor() {\n        this.path = \"\";//存储路径\n        this.name = \"\";\n        this.contentList = [];\n        this.images = []; //cell ImageFileData\n        this.files = []; //cell FileData\n        this.version = -1.0\n        this.id = \"\";\n        this.mid = \"\";\n    }\n\n    getContentListJson(isSaveAs = false) {\n        if (this.contentList == null || this.contentList.length == 0) {\n            return \"{}\";\n        }\n        let data = new MindContentJsonData()\n        let list = [];\n        for (let index = 0; index < this.contentList.length; index++) {\n            const content = this.contentList[index];\n            let cell = new MindContentData();\n            cell.content = \"\";\n            if (isSaveAs) {\n                cell.id = \"\" + index;\n            } else {\n                cell.id = content.id;\n            }\n            \n            cell.name = content.name;\n            cell.fileName = content.fileName\n            cell.mindType = content.mindType\n            list.push(cell);\n        }\n        data.version = this.version;\n        if (MindMe.isLogin()) {\n            data.id = MindMe.getUserId()\n        } else {\n            data.id = \"\";\n        }\n        data.mid = getMachineId()\n        data.lastsavetime = Util.getCurrentTime()\n        data.data = list;\n        for (let index = 0; index < this.files.length; index++) {\n            let cell = this.files[index]\n            let fileData = new FilePathAndName()\n            fileData.name = cell.name;\n            fileData.path = cell.path;\n            data.files.push(fileData)\n        }\n        let json = JSON.stringify(data, function (key, val) {\n            if (typeof val === \"function\") {\n                return val + '';\n            }\n            return val\n        });\n        return json;\n    }\n\n    format(json) {\n        let mapSaveData = new MapSaveData()\n        let data = JSON.parse(json)\n        for (var key in data) {\n            let keyValue = data[key]\n            if (key == \"data\") {\n                var list = []\n                 for (let index = 0; index < keyValue.length; index++) {\n                    let jsonDataCell = keyValue[index]\n                    let cell = new MindContentData();\n                    cell.content = \"\";\n                    cell.id = jsonDataCell.id;\n                    cell.name = jsonDataCell.name;\n                    cell.fileName = jsonDataCell.fileName\n                    cell.mindType = jsonDataCell.mindType\n                    list.push(cell);\n                 }\n                 mapSaveData.contentList = list\n            } else {\n                mapSaveData[key] = keyValue\n            }\n        }\n        return mapSaveData\n    }\n}\nexport default MapSaveData","import {apiRequest} from './base'\n\n//上次更新的导图列表checksum\nexport function postMindmapChecksum(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/checksum',req,onOk,onFail,eventually,headers,onProgress)\n}\n//拉取所有云端文件信息\nexport function postMindmapPull(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/pull',req,onOk,onFail,eventually,headers,onProgress)\n}\n//列出文件夹下所有文件\nexport function postMindmapListDir(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/list-dir',req,onOk,onFail,eventually,headers,onProgress)\n}\n//列出最近编辑的导图列表\nexport function postMindmapListEntities(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/list-entities',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取文件夹信息\nexport function postMindmapGetEntity(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/get-entity',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取导图内容\nexport function postMindmapGetMindmap(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/get-mindmap',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取AI内容\nexport function postMindmapGetAi(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/ask-chatgpt',req,onOk,onFail,eventually,headers,onProgress)\n}\n//新建导图\nexport function postMindmapNew(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/new',req,onOk,onFail,eventually,headers,onProgress)\n}\n//新建导图是否提示导图数量超出限制\nexport function postMindmapGetNumExceed(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/get-num-exceed',req,onOk,onFail,eventually,headers,onProgress)\n}\n//按类型新建导图\nexport function postMindmapNewByType(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/new-by-type',req,onOk,onFail,eventually,headers,onProgress)\n}\n//复制导图\nexport function postMindmapCopy(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/copy',req,onOk,onFail,eventually,headers,onProgress)\n}\n//新建目录\nexport function postMindmapNewDir(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/new-dir',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除文件\nexport function postMindmapDelete(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete',req,onOk,onFail,eventually,headers,onProgress)\n}\n//搜索导图\nexport function postMindmapQuery(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/query',req,onOk,onFail,eventually,headers,onProgress)\n}\n//移动导图或文件夹\nexport function postMindmapMove(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/move',req,onOk,onFail,eventually,headers,onProgress)\n}\n//修改文件夹\nexport function postMindmapUploadDir(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-dir',req,onOk,onFail,eventually,headers,onProgress)\n}\n//重命名\nexport function postMindmapAlias(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/alias',req,onOk,onFail,eventually,headers,onProgress)\n}\n//上传导图\nexport function postMindmapUploadMindmap(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-mindmap',req,onOk,onFail,eventually,headers,onProgress)\n}\n//上传图片\nexport function postMindmapUploadImage(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-image',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除图片\nexport function postMindmapDeleteImage(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-image',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取最近删除的导图列表\nexport function postMindmapListDeleted(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/list-deleted',req,onOk,onFail,eventually,headers,onProgress)\n}\n//搜索最近删除的导图\nexport function postMindmapSearchDeleted(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/search-deleted',req,onOk,onFail,eventually,headers,onProgress)\n}\n//恢复已删除的导图\nexport function postMindmapDeletedRestore(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/deleted-restore',req,onOk,onFail,eventually,headers,onProgress)\n}\n//彻底删除某个导图\nexport function postMindmapDeleteCompletely(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-completely',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取导图基本信息\nexport function postMindmapCheckMindmap(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/check-mindmap',req,onOk,onFail,eventually,headers,onProgress)\n}\n//播放导图\nexport function postMindmapPlay(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/play',req,onOk,onFail,eventually,headers,onProgress)\n}\n//上传附件\nexport function postMindmapUploadAttachment(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-attachment',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除附件\nexport function postMindmapDeleteAttachments(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-attachments',req,onOk,onFail,eventually,headers,onProgress)\n}\n//导入.xjmind文件\nexport function postMindmapImportXjmind(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/import-xjmind',req,onOk,onFail,eventually,headers,onProgress)\n}\n//ocr扫描生成导图\nexport function postMindmapOcrScan(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/ocr-scan',req,onOk,onFail,eventually,headers,onProgress)\n}\n//查询剩余ocr扫描次数\nexport function postMindmapOcrInfo(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/ocr-info',req,onOk,onFail,eventually,headers,onProgress)\n}\n//分享导图\nexport function postMindmapShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//修改分享状态\nexport function postMindmapModifyShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/modify-share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//重新生成分享链接\nexport function postMindmapReshare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/reshare',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除分享\nexport function postMindmapDeleteShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//收藏分享链接\nexport function postMindmapCollectShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/collect-share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//取消收藏分享链接\nexport function postMindmapUncollectShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/uncollect-share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//保存分享链接到我的导图\nexport function postMindmapSaveShare(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/save-share',req,onOk,onFail,eventually,headers,onProgress)\n}\n//获取当前账号可录音最大时长\nexport function postMindmapAudioLimit(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/audio-limit',req,onOk,onFail,eventually,headers,onProgress)\n}\n//上传音频-需要登录\nexport function postMindmapUploadAudio(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-audio',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除音频\nexport function postMindmapDeleteAudio(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-audio',req,onOk,onFail,eventually,headers,onProgress)\n}\n//查看分享链接\nexport function postMindmapView(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/view',req,onOk,onFail,eventually,headers,onProgress)\n}\n//访问关联导图\nexport function postMindmapViewConnectmap(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/view-connectmap',req,onOk,onFail,eventually,headers,onProgress)\n}\n//新建分页\nexport function postMindmapNewSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/new-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除分页\nexport function postMindmapDeleteSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//调整分页顺序\nexport function postMindmapMoveSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/move-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//分页重命名\nexport function postMindmapModifySheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/modify-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//复制分页\nexport function postMindmapCopySheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/copy-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//拉取分页列表\nexport function postMindmapListSheets(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/list-sheets',req,onOk,onFail,eventually,headers,onProgress)\n}\n//搜索分页\nexport function postMindmapSearchSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/search-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//迁移分页到另一张导图\nexport function postMindmapMigrateSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/migrate-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//导出分页为一张新的导图\nexport function postMindmapExportSheet(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/export-sheet',req,onOk,onFail,eventually,headers,onProgress)\n}\n//拉取归档列表\nexport function postMindmapQueryArchives(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/query-archives',req,onOk,onFail,eventually,headers,onProgress)\n}\n//导入归档\nexport function postMindmapArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//取消归档\nexport function postMindmapUnarchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/unarchive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//复制归档导图\nexport function postMindmapCopyArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/copy-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//删除归档\nexport function postMindmapDeleteArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//移动归档\nexport function postMindmapMoveArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/move-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//修改归档\nexport function postMindmapModifyArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/modify-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//移动归档顺序\nexport function postMindmapRearrangeArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/rearrange-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//新建归档文件夹\nexport function postMindmapNewArchiveDir(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/new-archive-dir',req,onOk,onFail,eventually,headers,onProgress)\n}\n//搜索归档\nexport function postMindmapSearchArchive(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/search-archive',req,onOk,onFail,eventually,headers,onProgress)\n}\n//拉取备份列表\nexport function postMindmapListBackups(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/list-backups',req,onOk,onFail,eventually,headers,onProgress)\n}\n//查看备份内容\nexport function postMindmapViewBackup(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/view-backup',req,onOk,onFail,eventually,headers,onProgress)\n}\n//备份还原\nexport function postMindmapRestoreBackup(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/restore-backup',req,onOk,onFail,eventually,headers,onProgress)\n}\n//备份删除\nexport function postMindmapDeleteBackup(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/delete-backup',req,onOk,onFail,eventually,headers,onProgress)\n}\n//我的LaTex模版\nexport function postMindmapMyLatex(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/my-latex',req,onOk,onFail,eventually,headers,onProgress)\n}\n//上传我的LaTex模板\nexport function postMindmapUploadMyLatex(req,onOk,onFail,eventually,headers,onProgress){\n    apiRequest('POST','/mindmap/upload-my-latex',req,onOk,onFail,eventually,headers,onProgress)\n}\n","class MindContentJsonData {\n    constructor() {\n        this.version = 1.0;\n        this.data = [];\n        this.files = [];\n        this.id = \"\";\n        this.mid = \"\";\n        this.lastsavetime = -1;\n    }\n}\nexport default MindContentJsonData","import { md5 } from \"../../../../common/netWork/base\";\nimport MindMe from \"../../../facade/MindMe\";\n\nclass MindContentData {\n    constructor() {\n        this.name = \"\";\n        this.fileName = \"\";\n        this.id = \"\";\n        this.mindType = 1;\n        this.content = null;\n        this.lastchangetime = -1;\n    }\n\n    setFileName(fileName, isMd5 = true) {\n        if (isMd5) {\n            this.fileName = md5(fileName) + \".json\";   \n        } else {\n            this.fileName = fileName;   \n        }\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    getContentJson() {        \n        let json = JSON.stringify(this, function (key, val) {\n            if (typeof val === \"function\") {\n                return val + '';\n            }\n            return val\n        });\n        return json;\n    }\n}\nexport default MindContentData","/**\n    sheet:{cover: \"r/mindyushu.oss-cn-shanghai.aliyuncs.com/mindmap/cover/e12e3f1435161df339be20f793ef1cb2.png\"\n    id: \"62d4d7c6103c41b62702d299\"\n    index: 0\n    name: \"分支主题 14\"\n    rootId: \"62d4d7c6103c41b62702d299\"} \n    */\nclass SheetData {\n    constructor() {\n        this.name = \"\";\n        this.cover = \"\";\n        this.id = \"\";\n        this.rootId = \"\";\n        this.index = 0;\n        this.lastchangetime = 0;\n        this.fileName = \"\";\n        this.type = 1;\n    }\n}\nexport default SheetData","import { postMindmapGetMindmap, postMindmapListSheets, postMindmapUploadMindmap } from \"../../common/netWork/mind_map_api\"\nimport LoadLocalXJMind from \"../core/tools/mapfile/LoadLocalXJMind\";\n\nclass MindmapDataRouter {\n    constructor() {\n        this.isElectron = true;\n    }\n\n    postGetMindmap(req, onOk, onFail, eventually, headers, onProgress) {\n        if (!LoadLocalXJMind.isCloudStorage() && req.path != null && req.path == this.getPath() && this.getLocalPath() != null && this.getLocalPath().length > 0) {\n            LoadLocalXJMind.loadMainContent(req.path, this.getLocalPath(), req.id, req.sheetId).then((data) => {\n                if (data != null) {\n                    let obj = {archiveId: \"\",\n                    audio: \"\",\n                    audioSeconds: 0,\n                    content: data.content,\n                    cover: \"\",\n                    createTime: 0,\n                    entityId: \"\",\n                    id: \"\",\n                    index: data.index,\n                    isArchived: false,\n                    isEmpty: false,\n                    lineLayout: data.lineLayout,\n                    machineId: \"\",\n                    mindDisplayType: data.mindDisplayType,\n                    modifyTime: \"\",\n                    name: data.name,\n                    nodeLayoutType: data.nodeLayoutType,\n                    parentId: \"\",\n                    sheetId: \"\",\n                    sheetNum: \"\",\n                    styleIndex: data.styleIndex,\n                    type: data.mindType,\n                    userId: \"\",}\n                    onOk(obj)\n                } else {\n                    onFail({desc:\"加载数据错误\"})\n                }\n            });\n        } else {\n            postMindmapGetMindmap(req, onOk, onFail, eventually, headers, onProgress)\n        }\n    }\n\n    postUploadMindmap(req, onOk, onFail, eventually, headers, onProgress) {\n        postMindmapUploadMindmap(req, onOk, onFail, eventually, headers, onProgress)\n    }\n\n    postMindmapSheets(req,onOk,onFail,eventually,headers,onProgress) {\n        if (!LoadLocalXJMind.isCloudStorage() && \n            this.getLocalPath() != null && this.getLocalPath().length > 0 && \n            (req.rootId == null || req.rootId == LoadLocalXJMind.getRootId())) {\n            LoadLocalXJMind.getMindmapSheets().then((data, error) => {\n                if (data != null) {\n                    onOk(data)\n                } else if (error != null) {\n                    onFail(error)\n                }\n            })\n        } else {\n            postMindmapListSheets(req,onOk,onFail,eventually,headers,onProgress)\n        }\n    }\n\n    setPath(path, local) {\n        LoadLocalXJMind.setPath(path, local)\n    }\n\n    setParameter(value) {\n        LoadLocalXJMind.setParameter(value)\n    }\n\n    getPath() {\n        return LoadLocalXJMind.getPath();\n    }\n\n    getLocalPath() {\n        return LoadLocalXJMind.getLocalPath();\n    }\n}\n\nexport default new MindmapDataRouter()","/*\n{totalNum: 4, pageSize: 20, sheets: Array(4)}\n*/\n\nclass MindSheets {\n    constructor() {\n        this.totalNum = 1;\n        this.pageSize = 20;\n        this.sheets = [];\n    }\n\n    toJSONString() {\n        let nodeStr = JSON.stringify(this, function (key, val) {\n            if (typeof val === \"function\") {\n                return val + '';\n            }\n            return val\n        });\n        return nodeStr;\n    }\n}\nexport default MindSheets","class FilePathAndName {\n    constructor() {\n        this.name = \"\";\n        this.path = \"\";\n    }\n}\nexport default FilePathAndName"],"sourceRoot":""}