(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[19],{

/***/ "./src/assets/images/ocr/scan_extraction.svg":
/*!***************************************************!*\
  !*** ./src/assets/images/ocr/scan_extraction.svg ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"img/scan_extraction.01d52651.svg\";\n\n//# sourceURL=webpack:///./src/assets/images/ocr/scan_extraction.svg?");

/***/ }),

/***/ "./src/core/core/dataformat/fileImport/NewXJMindMap.js":
/*!*************************************************************!*\
  !*** ./src/core/core/dataformat/fileImport/NewXJMindMap.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _MindMapZipConstant = _interopRequireDefault(__webpack_require__(/*! ../../../../viewmodel/core/tools/mapfile/MindMapZipConstant */ \"./src/viewmodel/core/tools/mapfile/MindMapZipConstant.js\"));\nvar _Util = _interopRequireDefault(__webpack_require__(/*! ../../../../utils/Util */ \"./src/utils/Util.js\"));\nvar _MapSaveData = _interopRequireDefault(__webpack_require__(/*! ../../../../viewmodel/core/tools/mapfile/MapSaveData */ \"./src/viewmodel/core/tools/mapfile/MapSaveData.js\"));\nvar _Config = _interopRequireDefault(__webpack_require__(/*! ../../calcule/Config */ \"./src/core/core/calcule/Config.js\"));\nvar _MindContentData = _interopRequireDefault(__webpack_require__(/*! ../../../../viewmodel/core/tools/mapfile/MindContentData */ \"./src/viewmodel/core/tools/mapfile/MindContentData.js\"));\nvar _base = __webpack_require__(/*! ../../../../common/netWork/base */ \"./src/common/netWork/base.js\");\nvar _LoadLocalXJMind = _interopRequireDefault(__webpack_require__(/*! ../../../../viewmodel/core/tools/mapfile/LoadLocalXJMind */ \"./src/viewmodel/core/tools/mapfile/LoadLocalXJMind.js\"));\nvar _UiUtil = _interopRequireDefault(__webpack_require__(/*! ../../../../utils/UiUtil */ \"./src/utils/UiUtil.js\"));\nvar _MindmapDataRouter = _interopRequireDefault(__webpack_require__(/*! ../../../../viewmodel/facade/MindmapDataRouter */ \"./src/viewmodel/facade/MindmapDataRouter.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nif ((typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) === \"object\" && typeof navigator.userAgent === \"string\" && navigator.userAgent.indexOf(\"Electron\") >= 0) {\n  var _window$require = window.require(\"electron\"),\n    ipcRenderer = _window$require.ipcRenderer;\n}\nvar NewXJMindMap = /*#__PURE__*/function () {\n  function NewXJMindMap(name, mindType, appPath, parameter) {\n    _classCallCheck(this, NewXJMindMap);\n    this.parameter = parameter;\n    this.appPath = appPath;\n    this.originalName = name;\n    this.mindType = mindType;\n    this.name = name;\n    this.xjmindContentJson = \"\";\n    this.isNewMindmap = false;\n  }\n  _createClass(NewXJMindMap, [{\n    key: \"createLocalSheetMindMap\",\n    value: function createLocalSheetMindMap(sheetName, jsonContent, id) {\n      var that = this;\n      return new Promise(function (resolve) {\n        var localPath = _LoadLocalXJMind.default.getLocalPath();\n        var path = _LoadLocalXJMind.default.getPath();\n        var contentPath = that.getLocalContentPath();\n        var filePath = that.getLocalFilesPath();\n        var contentJSPath = that.getLocalContentJsonPath();\n        _LoadLocalXJMind.default.loadJson(contentJSPath).then(function (data) {\n          var json = data;\n          var saveData = new _MapSaveData.default().format(json);\n          if (saveData.contentList == null || saveData.contentList.length == 0) {\n            resolve(null);\n            return;\n          }\n          var sheetData = new _MindContentData.default();\n          sheetData.name = sheetName;\n          sheetData.id = id != null && id.length > 0 ? id : \"\" + saveData.contentList.length;\n          sheetData.fileName = (0, _base.md5)(sheetName + _Util.default.getCurrentTime()) + \".json\";\n          sheetData.mindType = that.mindType;\n          saveData.contentList.push(sheetData);\n          var contentJson = saveData.getContentListJson();\n          that.saveLocalContent(contentJSPath, \"\", contentJson);\n          if (jsonContent != null) {\n            that.saveLocalContent(contentPath, sheetData.fileName, jsonContent);\n          } else {\n            that.saveLocalContent(contentPath, sheetData.fileName, \"\");\n          }\n          resolve({\n            path: path,\n            localPath: localPath,\n            parameter: that.parameter,\n            rootId: saveData.contentList[0].id,\n            id: sheetData.id,\n            index: saveData.contentList.length\n          });\n        });\n      });\n    }\n  }, {\n    key: \"copyLocalSheetMindMap\",\n    value: function copyLocalSheetMindMap(id) {\n      var that = this;\n      return new Promise(function (resolve) {\n        var localPath = _LoadLocalXJMind.default.getLocalPath();\n        var path = _LoadLocalXJMind.default.getPath();\n        var contentPath = that.getLocalContentPath();\n        var filePath = that.getLocalFilesPath();\n        var contentJSPath = that.getLocalContentJsonPath();\n        _MindmapDataRouter.default.postGetMindmap({\n          id: _LoadLocalXJMind.default.getRootId(),\n          sheetId: id,\n          path: _LoadLocalXJMind.default.getPath()\n        }, function (res) {\n          var jsonContent = res.content;\n          var name = res.name + \"_1\";\n          var mindType = res.type;\n          _LoadLocalXJMind.default.loadJson(contentJSPath).then(function (data) {\n            var json = data;\n            var saveData = new _MapSaveData.default().format(json);\n            if (saveData.contentList == null || saveData.contentList.length == 0) {\n              resolve(null);\n              return;\n            }\n            var sheetData = new _MindContentData.default();\n            sheetData.name = name;\n            sheetData.id = saveData.contentList.length;\n            sheetData.fileName = (0, _base.md5)(name + _Util.default.getCurrentTime()) + \".json\";\n            sheetData.mindType = mindType;\n            saveData.contentList.push(sheetData);\n            var contentJson = saveData.getContentListJson();\n            that.saveLocalContent(contentJSPath, \"\", contentJson);\n            if (jsonContent != null) {\n              that.saveLocalContent(contentPath, sheetData.fileName, jsonContent);\n            } else {\n              that.saveLocalContent(contentPath, sheetData.fileName, \"\");\n            }\n            resolve({\n              path: path,\n              localPath: localPath,\n              rootId: saveData.contentList[0].id,\n              id: sheetData.id,\n              index: saveData.contentList.length\n            });\n          });\n        }, function (error) {\n          resolve(null);\n        });\n      });\n    }\n  }, {\n    key: \"removeLocalSheetMindMap\",\n    value: function removeLocalSheetMindMap(id) {\n      var that = this;\n      return new Promise(function (resolve) {\n        var contentPath = that.getLocalContentPath();\n        var contentJSPath = that.getLocalContentJsonPath();\n        _LoadLocalXJMind.default.loadJson(contentJSPath).then(function (data) {\n          var json = data;\n          var saveData = new _MapSaveData.default().format(json);\n          if (saveData.contentList == null || saveData.contentList.length == 0) {\n            resolve(true);\n            return;\n          }\n          for (var index = 0; index < saveData.contentList.length; index++) {\n            if (saveData.contentList[index].id == id && index > 0) {\n              var fileName = saveData.contentList[index].fileName;\n              that.removeLocalFile(contentPath + _MindMapZipConstant.default.FileSeparator + fileName, \"\");\n              saveData.contentList.splice(index, 1);\n              break;\n            }\n          }\n          var contentJson = saveData.getContentListJson();\n          that.saveLocalContent(contentJSPath, \"\", contentJson);\n          resolve(true);\n        });\n      });\n    }\n  }, {\n    key: \"renameLocalSheetMindMap\",\n    value: function renameLocalSheetMindMap(id, name) {\n      var that = this;\n      return new Promise(function (resolve) {\n        var contentPath = that.getLocalContentPath();\n        var contentJSPath = that.getLocalContentJsonPath();\n        _LoadLocalXJMind.default.loadJson(contentJSPath).then(function (data) {\n          var json = data;\n          var saveData = new _MapSaveData.default().format(json);\n          if (saveData.contentList == null || saveData.contentList.length == 0) {\n            resolve(true);\n            return;\n          }\n          for (var index = 0; index < saveData.contentList.length; index++) {\n            if (saveData.contentList[index].id == id) {\n              saveData.contentList[index].name = name;\n              break;\n            }\n          }\n          var contentJson = saveData.getContentListJson();\n          that.saveLocalContent(contentJSPath, \"\", contentJson);\n          resolve(true);\n        });\n      });\n    }\n  }, {\n    key: \"createLocalMindMap\",\n    value: function createLocalMindMap() {\n      var _this = this;\n      this.isNewMindmap = true;\n      this.setName();\n      var that = this;\n      return new Promise(function (resolve) {\n        var contentPath = that.getLocalContentPath();\n        var filePath = that.getLocalFilesPath();\n        that.createFolder(contentPath, _this.name); //创建缓存路径\n        that.createFolder(filePath, _this.name); //创建缓存路径\n\n        var sheetData = new _MindContentData.default();\n        sheetData.name = that.originalName;\n        sheetData.fileName = (0, _base.md5)(that.originalName) + \".json\";\n        sheetData.id = \"0\";\n        sheetData.mindType = that.mindType;\n        var saveData = new _MapSaveData.default();\n        saveData.version = _Config.default.MindFormatVersion;\n        saveData.contentList = [];\n        saveData.contentList.push(sheetData);\n        saveData.name = that.originalName;\n        var contentJson = saveData.getContentListJson();\n        var contentJsonPath = that.getLocalContentJsonPath();\n        that.saveLocalContent(contentJsonPath, \"\", contentJson);\n        that.saveLocalContent(contentPath, sheetData.fileName, \"\");\n        that.open();\n      });\n    }\n  }, {\n    key: \"setName\",\n    value: function setName() {\n      if (this.name == null || this.name.length == 0) {\n        this.name = \"MindMap\";\n      }\n      this.name = this.name + _MindMapZipConstant.default.MindZIPLocalFilesPrefixName + _Util.default.getCurrentTime();\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      ipcRenderer.send(\"openCalendarWindow\", \"/mindmap?path=\" + encodeURIComponent(_MindMapZipConstant.default.MindZIPNewPathe) + \"&localpath=\" + encodeURIComponent(this.getLocalPath()) + \"&parameter=\" + encodeURIComponent(this.parameter));\n    }\n  }, {\n    key: \"saveLocalContent\",\n    value: function saveLocalContent(path, name, content) {\n      var fs = window.require('fs');\n      if (name == null || name.length == 0) {\n        fs.writeFile(path, content, function (err) {});\n      } else {\n        fs.writeFile(path + _MindMapZipConstant.default.FileSeparator + name, content, function (err) {});\n      }\n    }\n  }, {\n    key: \"removeLocalFile\",\n    value: function removeLocalFile(path, name) {\n      var fs = window.require('fs');\n      if (name == null || name.length == 0) {\n        fs.remo;\n        fs.unlink(path, function (err) {});\n      } else {\n        fs.unlink(path + _MindMapZipConstant.default.FileSeparator + name, function (err) {});\n      }\n    }\n  }, {\n    key: \"getLocalPath\",\n    value: function getLocalPath() {\n      if (!this.isNewMindmap) {\n        var _path = _LoadLocalXJMind.default.getLocalPath();\n        if (_path != null && _path.length > 0) {\n          return _path;\n        }\n      }\n      var path = this.appPath + _MindMapZipConstant.default.MindZIPLocalFilesFolderName + _MindMapZipConstant.default.FileSeparator + this.name;\n      var specialSymbolList = [\"?\", \"\\r\", \"\\n\"];\n      for (var index = 0; index < specialSymbolList.length; index++) {\n        var tag = specialSymbolList[index];\n        if (path.indexOf(tag) > -1) {\n          path = path.replace(tag, \"\");\n        }\n      }\n      return path;\n    }\n  }, {\n    key: \"getLocalContentPath\",\n    value: function getLocalContentPath() {\n      return this.getLocalPath() + _MindMapZipConstant.default.FileSeparator + _MindMapZipConstant.default.MindZIPContentFolderName;\n    }\n  }, {\n    key: \"getLocalFilesPath\",\n    value: function getLocalFilesPath() {\n      return this.getLocalPath() + _MindMapZipConstant.default.FileSeparator + _MindMapZipConstant.default.MindZIPFilesFolderName;\n    }\n  }, {\n    key: \"getLocalContentJsonPath\",\n    value: function getLocalContentJsonPath() {\n      return this.getLocalPath() + _MindMapZipConstant.default.FileSeparator + _MindMapZipConstant.default.MindZIPContentPath;\n    }\n  }, {\n    key: \"setTempFile\",\n    value: function setTempFile() {}\n  }, {\n    key: \"createFolder\",\n    value: function createFolder(dirpath, dirname) {\n      var fs = window.require('fs');\n      var path = window.require('path');\n      if (typeof dirname === \"undefined\") {\n        if (fs.existsSync(dirpath)) {} else {\n          this.createFolder(dirpath, path.dirname(dirpath));\n        }\n      } else {\n        if (dirname !== path.dirname(dirpath)) {\n          this.createFolder(dirpath);\n          return;\n        }\n        if (fs.existsSync(dirname)) {\n          fs.mkdirSync(dirpath, {\n            recursive: true\n          });\n        } else {\n          this.createFolder(dirname, path.dirname(dirname));\n          fs.mkdirSync(dirpath, {\n            recursive: true\n          });\n        }\n      }\n    }\n  }]);\n  return NewXJMindMap;\n}();\nvar _default = exports.default = NewXJMindMap;\n\n//# sourceURL=webpack:///./src/core/core/dataformat/fileImport/NewXJMindMap.js?");

/***/ })

}]);